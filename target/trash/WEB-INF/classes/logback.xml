<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ 版权所有 2018 ，xieyunbo.com
  -->

<!--a. scan,当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod,设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<configuration debug="false" scan="true" scanPeriod="600 seconds">
    <!--c. debug,当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <!--contextName ，设置日志上下文名称，可以通过%contextName来打印日志上下文名称-->
    <contextName>logback</contextName>
    <!--property可以用来设置变量，可以通过${name}来访问，有以下的属性-->
    <!--a. name，用于${name}访问的key-->
    <!--a. name，用于${name}访问的key-->
    <property name="default_pattern" value="%date [%thread] %-5level %logger{30} - %msg%n" />  
    <property name="log.basedir" value="/trash/logs" />
    <property name="common-error.dir" value="/common-error" />  
    <property name="default.dir" value="/default" />  
    <property name="base.dir" value="/base" />  
    <property name="web.dir" value="/web" />
    <!--<property file="src/main/java/chapters/configuration/variables.properties" /> 内容如下-->
    <!--<property resource="resource.properties" /> 两种效果是一样的-->
    <!--log.path=F:\\demo-->

    <!--appender格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略-->
    <!-- 日志输出到控制台 -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--encoder和pattern节点组合用于具体输出的日志格式-->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{9999} - %msg%n</pattern>  
        </layout>  
    </appender>  
  
    <!-- 根据rollingPolicy将日志打到相应的文件中 -->  
    <appender name="FILE-ERROR"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--filter，日志输出拦截器，可以自定义拦截器也可以用系统一些定义好的拦截器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>INFO</level>  
            <OnMismatch>DENY</OnMismatch>  
            <OnMatch>ACCEPT</OnMatch>  
        </filter>
        <!--file节点用来指明日志文件的输出位置，可以是绝对路径也可以是相对路径-->
        <file>${log.basedir}/${common-error.dir}/common-error.log</file>
        <!--日志回滚策略，在这里我们用了TimeBasedRollingPolicy，基于时间的回滚策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--必要节点，可以用来设置指定时间的日志归档，例如我们每天将日志归档成一个log.或者zip包-->
            <fileNamePattern>${log.basedir}/${common-error.dir}/common-error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--maxHistory ,可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,，例如设置为30的话，则30天之后，旧的日志就会被删除-->
            <!--totalSizeCap，可选节点，用来指定日志文件的上限大小，例如设置为3GB的话，那么到了这个值，就会删除旧的日志-->
            <!--<maxHistory>60</maxHistory>-->
            <!--<totalSizeCap>20GB</totalSizeCap>-->
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{9999} - %msg%n</pattern>  
        </layout>  
    </appender>  
  
    <appender name="FILE"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.basedir}/${default.dir}/default.log</file>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <fileNamePattern>${log.basedir}/${default.dir}/default-%d{yyyy-MM-dd}.log</fileNamePattern>  
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{9999} - %msg%n</pattern>  
        </layout>  
    </appender>  
  
    <appender name="BASE-FILE"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.basedir}/${base.dir}/base.log</file>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <fileNamePattern>${log.basedir}/${base.dir}/base-%d{yyyy-MM-dd}.log</fileNamePattern>  
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{9999} - %msg%n</pattern>  
        </layout>  
    </appender>  
  
    <appender name="WEB-FILE"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.basedir}/${web.dir}/web.log</file>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <fileNamePattern>${log.basedir}/${web.dir}/web-%d{yyyy-MM-dd}.log</fileNamePattern>  
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{9999} - %msg%n</pattern>  
        </layout>  
    </appender>
    <!--logger节点，可选节点，用来具体指明包的日志输出级别，它将会覆盖root的输出级别-->
    <logger name="java.sql">  
        <level value="INFO" />  
        <appender-ref ref="${log.appender:-BASE-FILE}" />  
        <appender-ref ref="${log.appender:-FILE-ERROR}" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
    <logger name="java.sql.Connection">  
        <level value="INFO" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
  
    <logger name="java.sql.Statement">  
        <level value="INFO" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
  
    <logger name="java.sql.CallableStatement">  
        <level value="INFO" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
  
    <logger name="java.sql.PreparedStatement">  
        <level value="INFO" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
    <logger name="org.apache.ibatis">  
        <level value="INFO" />  
        <appender-ref ref="${log.appender:-BASE-FILE}" />  
        <appender-ref ref="${log.appender:-FILE-ERROR}" />  
        <appender-ref ref="STDOUT" />  
    </logger>   
    <logger name="org.mybatis">  
        <level value="INFO" />  
        <appender-ref ref="${log.appender:-BASE-FILE}" />  
    </logger>  
  
    <logger name="org.springframework">  
        <level value="DEBUG" />  
        <appender-ref ref="${log.appender:-BASE-FILE}" />  
    </logger>
    <logger name="com.xyb.trash">
        <level value="INFO" />  
        <appender-ref ref="${log.appender:-BASE-FILE}" />  
        <appender-ref ref="${log.appender:-FILE-ERROR}" />  
        <appender-ref ref="STDOUT" />  
    </logger>  
<!-- 日志输出级别 -->
    <!--root节点，必选节点，用来指定最基础的日志输出级别，他有俩个自己点可以用来应用appender，格式化日志输出-->
<root level="INFO">
<appender-ref ref="STDOUT" />
</root>
</configuration>